<%= javascript_include_tag "games" %>
<%= stylesheet_link_tag    "games" %>

<%= content_tag :div, id: "game-data", data: {game: @game.to_json(:include => :moves)} do %>
<% end %>

<canvas id="myCanvas" width="600" height="600"></canvas>
<script>

  var dispatcher = new WebSocketRails(window.location.host + "/websocket", true)

  var canvas = document.getElementById('myCanvas');
  var ctx = canvas.getContext('2d');
  var N = 30;
  var HEIGHT = canvas.height
  var WIDTH = canvas.width
  var SQ_WIDTH = Math.floor(WIDTH/N)
  var GAME_DATA = $('#game-data').data("game")
  var SHIPS = [];

  // game logistics
  game = new Game(ctx);

  dispatcher.on_open = function() {
    dispatcher.trigger('get_data', GAME_DATA)
  }

  // This is how you send a move
  //dispatcher.trigger('send_move', {ship_id: 5, pos_x: 7, pos_y: 15})

  dispatcher.bind('move_response', function(message) {
    if (message.valid_json) {
      // Reload ships
      dispatcher.trigger('get_data', GAME_DATA)
    } else {
      // Error in our program. Do nothing
      console.log("ERROR: Invalid move format")
    }
  });

  dispatcher.bind('receive_data', function(message) {
    SHIPS = JSON.parse(message.ships);
    GAME_DATA = JSON.parse(message.game);
    game.reload();
  });

  // Inputs
  window.addEventListener('keydown', check, false);

  function check(e) {
    var code = e.keyCode;
    switch (code) {
      case 13:  dispatcher.trigger('send_move', {ship_id: 5, pos_x: 7, pos_y: 15}); break;
      case 39:  game.NextShipDown(); break; // Right key
      case 37:  game.NextShipUp(); break; // Left key
      default:  //Everything else
    }
  }

  setInterval(function () {
    ctx.clearRect(0, 0, WIDTH, HEIGHT);
    game.Display();
  }, 36);

</script>
